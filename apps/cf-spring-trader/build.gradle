buildscript {
	ext {
		springBootVersion = '1.2.3.RELEASE'
		springCloudVersion = '1.0.0.M1'
		springCFCloudVersion = '1.1.1.RELEASE'
		springSecurityVersion = '4.0.1.RELEASE'
		springVersion = '4.1.6.RELEASE'
		//springEurekaVersion = '1.0.2.RELEASE'
		springEurekaVersion = '1.0.3.BUILD-SNAPSHOT'
		//springEurekaVersion = '1.1.1.RELEASE'
		junitVersion = '4.12'
		jacksonVersion = '2.5.3'
		mysqlVersion = '5.1.35'
		bootstrapVersion = '2.3.2'
	}

	repositories {
		maven { url "https://repo.spring.io/milestone/" }
		maven { url "https://repo.spring.io/plugins-release/" }
		maven { url "https://repo.spring.io/libs-release/" }
		maven { url "https://repo.spring.io/libs-snapshot/" }
		maven { url "https://repo.spring.io/snapshot" }
		mavenCentral()
	}

	buildscript {
		dependencies {
			classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
			classpath "io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE"
		}
	}
}


// Apply versioning to all projects from versioning script.
allprojects { apply from: "$rootDir/gradle/versioning.gradle" }

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'


	jacoco { toolVersion = "0.7.1.201405082137" //	reportsDir = file("$buildDir/customJacocoReportDir")
	}
	jacocoTestReport {
		group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	}

	test { finalizedBy jacocoTestReport }

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	//dependencyManagement {
	//    imports {
	//        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springEurekaVersion}"
	//    }
	//}

	repositories {
		maven { url "https://repo.spring.io/milestone/" }
		maven { url "https://repo.spring.io/plugins-release/" }
		maven { url "https://repo.spring.io/libs-release/" }
		maven { url "https://repo.spring.io/libs-snapshot/" }
		maven { url "https://repo.spring.io/snapshot" }
		mavenCentral()
	}
	dependencies {

		//test packages

		testCompile "junit:junit:$junitVersion"

	}
}

project(':springboottrades-accounts') {
	apply plugin: 'spring-boot'
	jar { baseName = 'accounts' }
	description = "Micro-service to deal with accounts and user logins"

	dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
		compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"
		compile "org.springframework.cloud:spring-cloud-starter-config:${springEurekaVersion}"
		compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

		// test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"
        testRuntime "org.hsqldb:hsqldb"

		// Runtime
        runtime "mysql:mysql-connector-java:${mysqlVersion}"
		//runtime "org.hsqldb:hsqldb"
	}
}

project(':springboottrades-quotes') {
	apply plugin: 'spring-boot'
	jar { baseName = 'quotes' }
	description = "Micro-service to retrieve up to date quotes"
	dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework:spring-web:${springVersion}"
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:${springCloudVersion}"
        compile "io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker:${springCloudVersion}"
        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-config:${springEurekaVersion}"
        compile "org.springframework.cloud:spring-cloud-netflix:1.0.3.BUILD-SNAPSHOT"

		//runtime

		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"
	}
}

project(':springboottrades-portfolio') {
	apply plugin: 'spring-boot'
	jar { baseName = 'portfolio' }
	description = "Micro-service to manage portfolios"
	dependencies {
		compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
		compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springEurekaVersion}"
		compile "org.springframework.cloud:spring-cloud-starter-eureka:${springEurekaVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-config:${springEurekaVersion}"
        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

		//runtime
		runtime "mysql:mysql-connector-java:${mysqlVersion}"
		//runtime "org.hsqldb:hsqldb"

		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"
		testRuntime "org.hsqldb:hsqldb"
	}
}

project(':springboottrades-web') {
	apply plugin: 'spring-boot'
	apply plugin: "io.spring.dependency-management"


	jar { baseName = 'web' }
	description = "Web interface to the springboot set of services"

	dependencies {

		compile "com.netflix.servo:servo-core:0.7.5"
		compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:1.2.0.RC1"
		compile "org.springframework.cloud:spring-cloud-core:1.2.0.RC1"
		compile "org.springframework.cloud:spring-cloud-spring-service-connector:1.2.0.RC1"


		compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
		compile "io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:${springCloudVersion}"
		compile "io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-config:${springEurekaVersion}"
		compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
		compile "org.springframework.cloud:spring-cloud-netflix:1.0.3.BUILD-SNAPSHOT"


		compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE"

		runtime "org.webjars:bootstrap:${bootstrapVersion}"


		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	}
}

task wrapper(type: Wrapper) { gradleVersion = '2.3' }
